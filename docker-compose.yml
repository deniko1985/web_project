version: "3.9"

services:
  web_project:
    container_name: web_project
    hostname: app
    user: '1000:1000'
    # restart: unless-stopped
    restart: always
    build: 
      context: ./app/
      network: host
    networks:
      - web_project-network
    volumes:
      - ./app/:/app/
    ports:
      - 5001:5001
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
          constraints: [node.hostname == web_app]

  # web_project_front:  
  #  container_name: frontend
  #  restart: unless-stopped
  #  build: 
  #    context: ./frontend/
  #    network: host
  #  networks:
  #    - web_project-network
  #  volumes:
  #    - /frontend/:/fe_app/
  #  ports:
  #    - 5001:5001

  postgres:
    image: postgres:15.2
    container_name: postgres
    # user: '70:70'
    hostname: postgres
    # restart: unless-stopped
    restart: always
    networks:
      - web_project-network
    environment:
      # POSTGRES_DB: "web_project"
      # POSTGRES_USER: "postgres"
      # POSTGRES_PASSWORD: "postgres"
      # POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./postgres/data/:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      # start_period: 10s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
          constraints: [node.hostname == web_app]


networks:
  web_project-network:
    driver: bridge
